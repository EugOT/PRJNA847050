---
title: "Difference in signalling between astrocytic Insr+/- groups of the hypothalamic arcuate nucleus and Agrp or POMC neurons in response to high-fat high sugar diet"
author: "Evgenii O. Tretiakov"
format:
    html:
        toc: true
        df-print: paged
        code-fold: true
        fig.width: 14
        fig.height: 12
jupyter: python3
---

```{python}
import os
import random
import warnings
import sklearn
import scipy
from watermark import watermark
from sklearn.utils import check_random_state

from gprofiler import GProfiler

import matplotlib
import pacmap
import umap

import scvelo as scv
import scanpy as sc
import cellrank as cr
import anndata as ad
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import plotnine as p9
import liana as li
from liana.mt import rank_aggregate

warnings.simplefilter("ignore", category=UserWarning)
warnings.simplefilter("ignore", category=FutureWarning)
warnings.simplefilter("ignore", category=DeprecationWarning)
```


### genes

```{python}
npr = [
    "Adcyap1r1",
    "Avpr1a",
    "Calcr",
    "Calcrl",
    "Cckar",
    "Cckbr",
    "Cntfr",
    "Crhr1",
    "Crhr2",
    "Esr1",
    "Galr1",
    "Galr2",
    "Galr3",
    "Ghr",
    "Ghrhr",
    "Ghsr",
    "Glp1r",
    "Gpr55",
    "Gpr83",
    "Gpr149",
    "Grpr",
    "Hcrtr1",
    "Hcrtr2",
    "Igf1r",
    "Insr",
    "Insrr",
    "Kiss1r",
    "Lepr",
    "Mc1r",
    "Mc3r",
    "Mc4r",
    "Mchr1",
    "Nmbr",
    "Nmur1",
    "Nmur2",
    "Npffr1",
    "Npffr2",
    "Npr1",
    "Npr2",
    "Npr3",
    "Npsr1",
    "Npsr2",
    "Npy1r",
    "Npy2r",
    "Npy5r",
    "Ntrk2",
    "Ntsr1",
    "Ntsr2",
    "Oprd1",
    "Oprk1",
    "Oprl1",
    "Oprm1",
    "Oxtr",
    "Prlhr",
    "Prlr",
    "Prokr2",
    "Qrfpr",
    "Rxfp1",
    "Rxfp2",
    "Sstr1",
    "Sstr2",
    "Sstr3",
    "Tacr1",
    "Tacr3",
    "Trhr",
    "Trhr2",
    "Tshr",
    "Vipr1",
    "Vipr2",
]

npep = [
    "Adcyap1",
    "Agrp",
    "Avp",
    "Bdnf",
    "Cartpt",
    "Cck",
    "Cntf",
    "Crh",
    "Gal",
    "Ghrh",
    "Ghrl",
    "Grp",
    "Hcrt",
    "Kiss1",
    "Lep",
    "Nmb",
    "Nms",
    "Nmu",
    "Npvf",
    "Npw",
    "Npy",
    "Nts",
    "Oxt",
    "Pdyn",
    "Penk",
    "Pmch",
    "Pnoc",
    "Pomc",
    "Qrfp",
    "Reln",
    "Rln1",
    "Rln3",
    "Sst",
    "Tac1",
    "Tac2",
    "Trh",
]

genes_embed = [
    "Abcd1",
    "Abcd2",
    "Abcd3",
    "Acaa1",
    "Acaa2",
    "Acox1",
    "Agrn",
    "Agt",
    "Alcam",
    "Aldh1a1",
    "Aldh1l1",
    "Aldoc",
    "Angpt1",
    "Apoe",
    "App",
    "Aqp4",
    "Arf1",
    "Bmp7",
    "Bsg",
    "Caf4",
    "Ccl25",
    "Ckb",
    "Cnr1",
    "Cnr2",
    "Col4a5",
    "Cst3",
    "Dagla",
    "Daglb",
    "Decr2",
    "Dnm1",
    "Drp1",
    "Ech1",
    "Efna5",
    "Egfr",
    "Enho",
    "Eno1",
    "Faah",
    "Fgf1",
    "Fgfr3",
    "Fis1",
    "Fos",
    "Fth1",
    "Ftl1",
    "Gfap",
    "Gja1",
    "Gli1",
    "Glul",
    "Gnai2",
    "Gnas",
    "H2-K1",
    "Hacd2",
    "Hadhb",
    "Hbegf",
    "Hepacam",
    "Hif1",
    "Htra1",
    "Igsf1",
    "Il18",
    "Il1rapl1",
    "Itgav",
    "Jam2",
    "Lama2",
    "Lamb2",
    "Lcat",
    "Lgi1",
    "Lgi4",
    "Lpcat3",
    "Lrpap1",
    "Lrrc4b",
    "Insr",
    "Mdk",
    "Mdv1",
    "Mfn1",
    "Mfn2",
    "Mgll",
    "Mief1",
    "Napepld",
    "Ncam1",
    "Ncan",
    "Ndrg2",
    "Nfasc",
    "Nfia",
    "Nlgn3",
    "Nrxn1",
    "Nrxn2",
    "Ntn1",
    "Ntrk3",
    "Opa1",
    "Otp",
    "Pex1",
    "Pex10",
    "Pex12",
    "Pex13",
    "Pex14",
    "Pex16",
    "Pex2",
    "Pex26",
    "Pex3",
    "Pex6",
    "Pkm",
    "Pla2g7",
    "Plcb1",
    "Psap",
    "Ptn",
    "Pygb",
    "Rgma",
    "Rtn4",
    "S100a1",
    "S100a6",
    "S100b",
    "Scd2",
    "Sdc2",
    "Sema6a",
    "Sema6d",
    "Sgcd",
    "Sirpa",
    "Slc1a2",
    "Slc1a3",
    "Slc38a1",
    "Slc4a4",
    "Slc6a11",
    "Slc7a10",
    "Slit1",
    "Slit2",
    "Slitrk2",
    "Sorbs1",
    "Sox9",
    "Sparc",
    "Spon1",
    "Tafa1",
    "Timp3",
    "Tkt",
    "Trpv1",
    "Vcam1",
    "Vegfa",
]

nmr = [
    "Adra1a",
    "Adra1b",
    "Adra1d",
    "Adra2a",
    "Adra2b",
    "Adra2c",
    "Adrb1",
    "Adrb2",
    "Adrb3",
    "Adrbk1",
    "Adrbk2",
    "Adrm1",  # adrenergic receptors
    "Adora1",
    "Adora2a",
    "Adora2b",
    "Adora3",  # adenosine receptors
    "Chrm1",
    "Chrm2",
    "Chrm3",
    "Chrm4",
    "Chrm5",
    "Chrna1",
    "Chrna2",
    "Chrna3",
    "Chrna4",
    "Chrna5",
    "Chrna6",
    "Chrna7",
    "Chrna9",
    "Chrna10",
    "Chrnb1",
    "Chrnb2",
    "Chrnb3",
    "Chrnd",
    "Chrng",  # cholinergic receptors
    "Gria1",
    "Gria2",
    "Gria3",
    "Gria4",  # iGlu AMPA receptors
    "Grid1",
    "Grid2",  # iGlu delta receptors
    "Grik1",
    "Grik2",
    "Grik3",
    "Grik4",
    "Grik5",  # iGlu kainate receptors
    "Grin1",
    "Grin2a",
    "Grin2b",
    "Grin2c",
    "Grin2d",
    "Grin3a",
    "Grin3b",  # iGlu NMDA receptors
    "Grm1",
    "Grm5",  # mGluRs 1
    "Grm2",
    "Grm3",  # mGluRs 2
    "Grm4",
    "Grm6",
    "Grm7",
    "Grm8",  # mGluRs 3
    "Gabra1",
    "Gabra2",
    "Gabra3",
    "Gabra4",
    "Gabra5",
    "Gabra6",
    "Gabrb1",
    "Gabrb2",
    "Gabrb3",
    "Gabrg1",
    "Gabrg2",
    "Gabrg3",
    "Gabrd",
    "Gabre",
    "Gabrp",
    "Gabrq",
    "Gabrr1",
    "Gabrr2",
    "Gabrr3",
    "Gabbr1",
    "Gabbr2",  # GABA receptors
    "Drd1",
    "Drd2",
    "Drd3",
    "Drd4",
    "Drd5",  # dopamine receptors
    "Htr1a",
    "Htr1b",
    "Htr1d",
    "Htr1f",
    "Htr2a",
    "Htr2b",
    "Htr2c",
    "Htr3a",
    "Htr3b",
    "Htr4",
    "Htr5a",
    "Htr5b",
    "Htr6",
    "Htr7",  # serotonin receptors
    "Gnas",
    "Gnai1",
    "Gnai2",
    "Gnai3",
    "Gnao1",
    "Gnao2",
    "Gnaq",
    "Gna11",
    "Gna12",
    "Gna13",
    "Gnal",
    "Gnasxl",  # G protein alpha subunit
    "Gnb1",
    "Gnb2",
    "Gnb3",
    "Gnb4",
    "Gnb5",  # G protein beta subunit
    "Gng2",
    "Gng3",
    "Gng4",
    "Gng5",
    "Gng7",
    "Gng8",
    "Gng10",
    "Gng11",
    "Gng12",
    "Gng13",
    "Gngt1",
    "Gngt2",  # G protein gamma subunit
    "P2rx1",
    "P2rx2",
    "P2rx3",
    "P2rx4",
    "P2rx5",
    "P2rx6",
    "P2rx7",
    "P2ry1",
    "P2ry2",
    "P2ry4",
    "P2ry6",
    "P2ry12",
    "P2ry13",
    "P2ry14",  # purinergic receptors
    "Ryr1",
    "Ryr2",
    "Ryr3",  # ryanodine receptors
]

mitochondrial = [
    "Mfn1",  # Mitofusin 1: A GTPase located on the outer mitochondrial membrane that plays a crucial role in mitochondrial fusion. Mfn1 mediates tethering and fusion of the outer mitochondrial membranes, helping to maintain the integrity and function of the mitochondrial network.
    "Mfn2",  # Mitofusin 2: Another GTPase on the outer mitochondrial membrane that is involved in mitochondrial fusion. Mfn2 works in concert with Mfn1 to mediate the fusion of outer mitochondrial membranes, maintaining proper mitochondrial function and dynamics.
    "Opa1",  # Optic atrophy 1: A dynamin-related GTPase located in the inner mitochondrial membrane that is crucial for the regulation of mitochondrial fusion. Opa1 mediates the fusion of inner mitochondrial membranes, contributing to the maintenance of mitochondrial morphology, cristae structure, and overall mitochondrial function. Additionally, Opa1 plays a role in the regulation of apoptosis and is involved in the proper functioning of the electron transport chain.
    "Dnm1",  # Dynamin 1: A GTPase involved in the regulation of membrane remodeling and trafficking, including vesicle formation and endocytosis. It has also been implicated in the regulation of mitochondrial morphology and function.
    "Drp1",  # Dynamin-related protein 1: Another GTPase, which plays a central role in mitochondrial fission. It is recruited to the outer mitochondrial membrane during fission and is crucial for the proper division and maintenance of mitochondrial networks.
    "Dnm1l",  # Dynamin 1-like, involved in mitochondrial fission
    "Fis1",  # Fission 1, involved in mitochondrial fission
    "Mff",  # Mitochondrial fission factor, involved in mitochondrial fission
    "Mid49",  # Mitochondrial dynamics protein of 49 kDa, involved in mitochondrial fission
    "Mid51",  # Mitochondrial dynamics protein of 51 kDa, involved in mitochondrial fission
    "Ppargc1a",  # Peroxisome proliferator-activated receptor gamma coactivator 1-alpha, involved in mitochondrial biogenesis
    "Ppargc1b",  # Peroxisome proliferator-activated receptor gamma coactivator 1-beta, involved in mitochondrial biogenesis
    "Nrf1",  # Nuclear respiratory factor 1, involved in mitochondrial biogenesis
    "Nrf2",  # Nuclear respiratory factor 2, involved in mitochondrial biogenesis
    "Tfam",  # Mitochondrial transcription factor A, involved in mitochondrial biogenesis
    "Sod2",  # Superoxide dismutase 2, involved in mitochondrial antioxidant defense
    "Prdx3",  # Peroxiredoxin 3, involved in mitochondrial antioxidant defense
    "Slc25a1",  # Solute carrier family 25 member 1, involved in mitochondrial metabolism
    "Slc25a4",  # Solute carrier family 25 member 4, involved in mitochondrial metabolism
    "Slc25a5",  # Solute carrier family 25 member 5, involved in mitochondrial metabolism
    "Uqcrc1",  # Ubiquinol-cytochrome c reductase core protein 1, involved in mitochondrial electron transport chain
    "Uqcrc2",  # Ubiquinol-cytochrome c reductase core protein 2, involved in mitochondrial electron transport chain
    "Cox4i1",  # Cytochrome c oxidase subunit 4 isoform 1, involved in mitochondrial electron transport chain
    "Cox4i2",  # Cytochrome c oxidase subunit 4 isoform 2, involved in mitochondrial electron transport chain
    "Atp5a1",  # ATP synthase, H+ transporting, mitochondrial F1 complex, alpha subunit 1, involved in mitochondrial ATP production
    "Atp5b",  # ATP synthase, H+ transporting, mitochondrial F1 complex, beta subunit, involved in mitochondrial ATP production
    "Bak1",  # BCL2 antagonist/killer 1, involved in mitochondrial-mediated apoptosis
    "Bax",  # BCL2 associated X, involved in mitochondrial-mediated apoptosis
    "Bcl2",  # B-cell CLL/lymphoma 2, involved in mitochondrial-mediated apoptosis
    "Bcl2l1",  # BCL2-like 1, involved in mitochondrial-mediated apoptosis
    "Bnip3",  # BCL2/adenovirus E1B 19kDa interacting protein 3, involved in mitoptosis
    "Bnip3l",  # BCL2/adenovirus E1B 19kDa interacting protein 3-like, involved in mitoptosis
    "Casp9",  # Caspase 9, involved in mitochondrial-mediated apoptosis
    "Cybb",  # Cytochrome b-245, beta polypeptide, involved in oxidative stress
    "Gpx1",  # Glutathione peroxidase 1, involved in oxidative stress
    "Gpx4",  # Glutathione peroxidase 4, involved in oxidative stress
    "Mapk14",  # Mitogen-activated protein kinase 14, involved in ischemia and oxidative stress
    "Nfe2l2",  # Nuclear factor, erythroid 2 like 2, involved in oxidative stress response
    "Nox4",  # NADPH oxidase 4, involved in oxidative stress
    "Polg",  # DNA polymerase gamma, involved in mitochondrial DNA replication
    "Polg2",  # DNA polymerase gamma 2, involved in mitochondrial DNA replication
    "Pink1",  # PTEN-induced putative kinase 1, involved in mitophagy
    "Park2",  # Parkin RBR E3 ubiquitin protein ligase, involved in mitophagy
    "Aifm1",  # Apoptosis-inducing factor, mitochondrion-associated, 1, involved in DNA damage and apoptosis
    "Ogg1",  # 8-oxoguanine DNA glycosylase 1, involved in DNA damage repair
    "Mutyh",  # MutY DNA glycosylase, involved in DNA damage repair
    "Sod1",  # Superoxide dismutase 1, involved in oxidative stress
    "Sod3",  # Superoxide dismutase 3, involved in oxidative stress
    "Ucp1",  # Uncoupling protein 1, involved in thermogenesis
    "Ucp2",  # Uncoupling protein 2, involved in thermogenesis
    "Ucp3",  # Uncoupling protein 3, involved in thermogenesis
    "Ucp4",  # Uncoupling protein 4, involved in thermogenesis
    "Ucp5",  # Uncoupling protein 5, involved in thermogenesis
    "Fgf21",  # Fibroblast growth factor 21, involved in metabolic regulation
    "Klb",  # Klotho beta (beta-klotho), co-receptor for Fgf21
    # Additional genes related to brain metabolism switch and different catabolic/anabolic modes
    "Bdh1",  # 3-hydroxybutyrate dehydrogenase 1, involved in ketone body metabolism
    "Bdh2",  # 3-hydroxybutyrate dehydrogenase 2, involved in ketone body metabolism
    "Hmgcs2",  # 3-hydroxy-3-methylglutaryl-CoA synthase 2, involved in ketone body synthesis
    "Slc16a1",  # Solute carrier family 16 member 1 (monocarboxylate transporter 1), involved in ketone body transport
    "Slc16a7",  # Solute carrier family 16 member 7 (monocarboxylate transporter 2), involved in ketone body transport
    "Slc2a1",  # Solute carrier family 2 member 1 (glucose transporter type 1), involved in glucose transport
    "Slc2a3",  # Solute carrier family 2 member 3 (glucose transporter type 3), involved in glucose transport
    "Gck",  # Glucokinase, involved in glycolysis
    "Pfkp",  # Phosphofructokinase, platelet, involved in glycolysis
    "Pkm",  # Pyruvate kinase, muscle, involved in glycolysis
    "Pdha1",  # Pyruvate dehydrogenase E1 alpha 1, involved in the conversion of pyruvate to acetyl-CoA
    "Pdha2",  # Pyruvate dehydrogenase E1 alpha 2, involved in the conversion of pyruvate to acetyl-CoA
    "Pdk1",  # Pyruvate dehydrogenase kinase 1, involved in the regulation of pyruvate dehydrogenase complex
    "Pdk2",  # Pyruvate dehydrogenase kinase 2, involved in the regulation of pyruvate dehydrogenase complex
    "Pdk3",  # Pyruvate dehydrogenase kinase 3, involved in the regulation of pyruvate dehydrogenase complex
    "Pdk4",  # Pyruvate dehydrogenase kinase 4, involved in the regulation of pyruvate dehydrogenase complex
    "Acox1",  # Acyl-CoA oxidase 1, involved in fatty acid oxidation
    "Cpt1a",  # Carnitine palmitoyltransferase 1A, involved in fatty acid oxidation
    "Cpt1b",  # Carnitine palmitoyltransferase 1B, involved in fatty acid oxidation
    "Cpt1c",  # Carnitine palmitoyltransferase 1C, involved in fatty acid oxidation
    "Cpt2",  # Carnitine palmitoyltransferase 2, involved in fatty acid oxidation
    "Acsl1",  # Acyl-CoA synthetase long-chain family member 1, involved in fatty acid activation
    "Acsl3",  # Acyl-CoA synthetase long-chain family member 3, involved in fatty acid activation
    "Acsl4",  # Acyl-CoA synthetase long-chain family member 4, involved in fatty acid activation
    "Acsl5",  # Acyl-CoA synthetase long-chain family member 5, involved in fatty acid activation
    "Acsl6",  # Acyl-CoA synthetase long-chain family member 6, involved in fatty acid activation
    "Acly",  # ATP citrate lyase, involved in fatty acid synthesis
    "Fasn",  # Fatty acid synthase, involved in fatty acid synthesis
    "Scd1",  # Stearoyl-CoA desaturase 1, involved in fatty acid desaturation
    "Scd2",  # Stearoyl-CoA desaturase 2, involved in fatty acid desaturation
    "Acaa1",  # Acetyl-CoA acyltransferase 1: Involved in the beta-oxidation of fatty acids in the mitochondria. Catalyzes the last step in the breakdown of fatty acids, converting 3-ketoacyl-CoA to acetyl-CoA.
    "Acaa2",  # Acetyl-CoA acyltransferase 2: Also involved in beta-oxidation of fatty acids in the mitochondria. Similar to Acaa1, it catalyzes the last step of fatty acid breakdown but has different substrate specificity.
    "Aldh1a1",  # Aldehyde dehydrogenase 1 family, member A1: An enzyme involved in the detoxification of aldehydes (generated from alcohol metabolism and lipid peroxidation) by converting them to carboxylic acids.
    "Eno1",  # Enolase 1: A glycolytic enzyme that catalyzes the conversion of 2-phosphoglycerate to phosphoenolpyruvate in the glycolysis pathway, which generates ATP through the breakdown of glucose.
    "Hadhb",  # Hydroxyacyl-CoA dehydrogenase/3-ketoacyl-CoA thiolase/enoyl-CoA hydratase, beta subunit: A mitochondrial enzyme that participates in fatty acid beta-oxidation, playing a role in multiple steps of the process.
    "Pygb",  # Glycogen phosphorylase, brain form: An enzyme that breaks down glycogen into glucose-1-phosphate, which is then converted to glucose-6-phosphate for entry into glycolysis. This enzyme plays a critical role in energy production, particularly during periods of increased energy demand.
]
```


### parameters

```{python}
bioproject = "PRJNA847050"

# Distance Metric to Use
# metric = snakemake.params["metric"]
metric = "euclidean"
# connectivity_model = snakemake.params["connectivity_model"]
connectivity_model = "min_tree"
PLOTS_DIR = os.path.join("../output/figures/velocity-signalling/")
os.makedirs(PLOTS_DIR, exist_ok=True)
OUT_DIR = os.path.join("../data/velocity-signalling/")
os.makedirs(OUT_DIR, exist_ok=True)

# plotting params
pt_size = 200
dnsty = 0.8
plt_size = [5, 5]

SMALL_SIZE = 7
MEDIUM_SIZE = 8
BIGGER_SIZE = 12

plt.rc("font", size=SMALL_SIZE)  # controls default text sizes
plt.rc("axes", titlesize=SMALL_SIZE)  # fontsize of the axes title
plt.rc("axes", labelsize=MEDIUM_SIZE)  # fontsize of the x and y labels
plt.rc("xtick", labelsize=SMALL_SIZE)  # fontsize of the tick labels
plt.rc("ytick", labelsize=SMALL_SIZE)  # fontsize of the tick labels
plt.rc("legend", fontsize=SMALL_SIZE)  # legend fontsize
plt.rc("figure", titlesize=BIGGER_SIZE)  # fontsize of the figure title
matplotlib.rcParams["font.size"] = 11
matplotlib.rcParams["pdf.use14corefonts"] = True
matplotlib.rcParams["pdf.fonttype"] = 42
matplotlib.rcParams["ps.fonttype"] = 42
matplotlib.rcParams["font.family"] = "sans-serif"
matplotlib.rcParams["font.sans-serif"] = ["Helvetica"]
matplotlib.rcParams["figure.max_open_warning"] = 20000


reseed = 42
random.seed(reseed)
np.random.seed(reseed)
random_state = check_random_state(reseed)

verbose = True
sc.settings.verbosity = 2  # verbosity: errors (0), warnings (1), info (2), hints (3)
scv.settings.set_figure_params("scvelo")
sc.settings.figdir = PLOTS_DIR
sc.settings.writedir = OUT_DIR
sc.settings.set_figure_params(
    dpi=120,
    dpi_save=300,
    vector_friendly=True,
    format="pdf",
    transparent=True,
    color_map="gnuplot_r",
)
sc.settings.autoshow = False
sc.settings.autosave = True

# k = int(snakemake.params["k"])
k = 20
ks = k + 10
npcs = 50
npcs_selected = npcs - 20
min_shared_umis = 15
n_top_hvg = 3000
cb_fpr = 0.001
paga_threshold = 1.0
spread = 2
threads = 80
svm_fit_strength = 100
```


### Load data

```{python}
housekeeping = f"/data/data/housekeeping_mouse.tsv"
hk_genes1 = []
with open(housekeeping) as file:
    while hk_genes := file.readline():
        hk_genes1.append(hk_genes.rstrip())
```


```{python}
adata = sc.read_h5ad(
    f"../data/class_cello/PRJNA847050-astrocytes_dataset-{cb_fpr}-initial_selection.h5ad"
)

adata.obs["cell_id"] = adata.obs_names

alldata = sc.read_h5ad(
    f"../data/class_cello/PRJNA847050-whole_dataset-{cb_fpr}-cello_annotation.h5ad"
)
alldata = alldata[alldata.obs["ora_celltype"].isin(["Astrocytes", "Neurons"])]

adata_norm = alldata[alldata.obs["condit"] == 0]
adata_hfd = alldata[alldata.obs["condit"] == 1]
```

### Signalling analysis

#### Normal diet

```{python}
adata_norm.obs["k_tree"] = adata_norm.obs["k_tree"].astype("category")
adata_norm.raw.X
```

subset groups of interest

```{python}
sc.pl.umap(
    adata_norm,
    color=["k_tree"],
    size=pt_size,
    legend_loc="on data",
    show=True,
    save=False,
)
```

```{python}
sc.pl.umap(
    adata_norm,
    color=[
        "Rbfox3",
        "Pomc",
        "Agrp",
        "Npy",
        "Npy1r",
        "Npy2r",
        "Gfap",
        "Insr",
        "Slc1a3",
        "Htra1",
        "Mfn2",
        "Fos",
    ],
    alpha=0.3,
    size=pt_size,
    show=True,
    save=False,
)
```

```{python}
sc.pl.embedding(
    adata_norm,
    basis="X_pacmap",
    color=[
        "Rbfox3",
        "Pomc",
        "Agrp",
        "Npy",
        "Npy1r",
        "Npy2r",
        "Gfap",
        "Insr",
        "Slc1a3",
        "Htra1",
        "Mfn2",
        "Fos",
    ],
    alpha=0.3,
    add_outline=False,
    legend_fontsize=12,
    legend_fontoutline=2,
    frameon=False,
    palette="nipy_spectral",
    show=True,
    save="-pacmap-int-normal-diet-insr-status.pdf",
)
```

```{python}
sc.pl.embedding(
    adata_norm,
    basis="X_pacmap",
    color=[g for g in genes_embed if g in adata_norm.var_names],
    alpha=0.3,
    add_outline=False,
    legend_fontsize=12,
    legend_fontoutline=2,
    frameon=False,
    palette="nipy_spectral",
    show=True,
    save="-pacmap-adgene-normal-diet-insr-status.pdf",
)
```

```{python}
with matplotlib.rc_context({"figure.figsize": (5.5, 4)}):
    sc.pl.violin(
        adata_norm,
        ["Pomc", "Agrp", "Npy", "Insr", "Gfap", "Fos"],
        groupby="k_tree",
        stripplot=False,
        frameon=False,
        palette="nipy_spectral",
        show=True,
        save="-violin-adgene-normal-diet-insr-status.pdf",
    )
```

```{python}
pomc_neurons = adata_norm[
    (adata_norm[:, "Pomc"].to_df() > 10).stack().values
    & (adata_norm.obs["ora_celltype"].isin(["Neurons"])),
    :,
]
npy_neurons = adata_norm[
    (
        (adata_norm[:, "Agrp"].to_df() > 10).stack().values
        | (adata_norm[:, "Npy"].to_df() > 10).stack().values
    )
    & (adata_norm.obs["ora_celltype"].isin(["Neurons"])),
    :,
]
insr_pos_astro = adata_norm[
    (adata_norm[:, "Insr"].to_df() > 1).stack().values
    & (adata_norm.obs_names.isin(adata.obs_names)),
    :,
]
insr_neg_astro = adata_norm[
    (adata_norm[:, "Insr"].to_df() == 0).stack().values
    & (adata_norm.obs_names.isin(adata.obs_names)),
    :,
]
```

```{python}
adata_norm.obs["goi"] = adata_norm.obs["k_tree"]
adata_norm.obs["goi"] = adata_norm.obs["goi"].cat.add_categories("POMC neurons")
adata_norm.obs.loc[
    lambda df: df.index.isin(pomc_neurons.obs.index), "goi"
] = "POMC neurons"
adata_norm.obs["goi"] = adata_norm.obs["goi"].cat.add_categories("AGRP/NPY neurons")
adata_norm.obs.loc[
    lambda df: df.index.isin(npy_neurons.obs.index), "goi"
] = "AGRP/NPY neurons"
adata_norm.obs["goi"] = adata_norm.obs["goi"].cat.add_categories("Astro_INSR+")
adata_norm.obs.loc[
    lambda df: df.index.isin(insr_pos_astro.obs.index), "goi"
] = "Astro_INSR+"
adata_norm.obs["goi"] = adata_norm.obs["goi"].cat.add_categories("Astro_INSR-")
adata_norm.obs.loc[
    lambda df: df.index.isin(insr_neg_astro.obs.index), "goi"
] = "Astro_INSR-"

adata_norm = adata_norm[
    adata_norm.obs["goi"].isin(
        ["POMC neurons", "AGRP/NPY neurons", "Astro_INSR+", "Astro_INSR-"]
    )
]
adata_norm.obs["goi"].cat.remove_unused_categories(inplace=True)
```

```{python}
sc.pl.embedding(
    adata_norm,
    basis="X_pacmap",
    color=[
        "Rbfox3",
        "Pomc",
        "Agrp",
        "Npy",
        "Npy1r",
        "Npy2r",
        "Gfap",
        "Insr",
        "Slc1a3",
        "Htra1",
        "Mfn2",
        "Fos",
    ],
    alpha=0.3,
    add_outline=False,
    legend_fontsize=12,
    legend_fontoutline=2,
    frameon=False,
    palette="nipy_spectral",
    show=True,
    save="-pacmap-subset-int-normal-diet-insr-status.pdf",
)
```

```{python}
sc.pl.embedding(
    adata_norm,
    basis="X_pacmap",
    color=["goi"],
    alpha=0.3,
    add_outline=False,
    legend_fontsize=12,
    legend_fontoutline=2,
    frameon=False,
    palette="nipy_spectral",
    show=True,
    save="-pacmap-subset-goi-normal-diet-insr-status.pdf",
)
```

```{python}
sc.pl.embedding(
    adata_norm,
    basis="X_pacmap",
    color=[g for g in genes_embed if g in adata_norm.var_names],
    alpha=0.3,
    add_outline=False,
    legend_fontsize=12,
    legend_fontoutline=2,
    frameon=False,
    palette="nipy_spectral",
    show=True,
    save="-pacmap-subset-adgene-normal-diet-insr-status.pdf",
)
```

```{python}
sc.pp.normalize_total(adata_norm, target_sum=1e4)
sc.pp.log1p(adata_norm)
adata_norm.raw = adata_norm
li.mt.rank_aggregate(
    adata_norm,
    groupby="goi",
    de_method="logreg",
    expr_prop=0,
    min_cells=3,
    return_all_lrs=True,
    verbose=False,
    resource_name="mouseconsensus",
    n_perms=100000,
    seed=reseed,
)
```


```{python}
adata_norm.uns["liana_res"].to_csv("arc_astro-with_npy_pomc-liana-res.csv")
adata_norm.uns["liana_res"].head()
```

```{python}
n2a_norm = li.pl.dotplot(
    adata=adata_norm,
    colour="magnitude_rank",
    size="specificity_rank",
    inverse_size=True,
    inverse_colour=True,
    source_labels=["POMC neurons", "AGRP/NPY neurons"],
    target_labels=["Astro_INSR+", "Astro_INSR-"],
    top_n=20,
    orderby="lr_logfc",
    orderby_ascending=False,
    figure_size=(8, 10),
)

(
    n2a_norm
    +
    # change theme
    p9.theme_tufte()
    +
    # modify theme
    p9.theme(
        # adjust facet size
        strip_text=p9.element_text(size=12)
    )
)
n2a_norm.save(filename="liana-dotplot-logfc-normal-diet-n2a-insr-status.pdf")
```

```{python}
n2a_norm = li.pl.dotplot(
    adata=adata_norm,
    colour="magnitude_rank",
    size="specificity_rank",
    inverse_size=True,
    inverse_colour=True,
    source_labels=["POMC neurons", "AGRP/NPY neurons"],
    target_labels=["Astro_INSR+", "Astro_INSR-"],
    filterby="magnitude_rank",
    filter_lambda=lambda x: x <= 0.01,
    top_n=20,
    orderby="specificity_rank",
    orderby_ascending=True,
    figure_size=(8, 10),
)

(
    n2a_norm
    +
    # change theme
    p9.theme_tufte()
    +
    # modify theme
    p9.theme(
        # adjust facet size
        strip_text=p9.element_text(size=12)
    )
)
n2a_norm.save(filename="liana-dotplot-specificity_rank-normal-diet-n2a-insr-status.pdf")
```

```{python}
n2a_norm = li.pl.dotplot(
    adata=adata_norm,
    colour="magnitude_rank",
    size="specificity_rank",
    inverse_size=True,
    inverse_colour=True,
    source_labels=["POMC neurons", "AGRP/NPY neurons"],
    target_labels=["Astro_INSR+", "Astro_INSR-"],
    filterby="specificity_rank",
    filter_lambda=lambda x: x <= 0.01,
    top_n=20,
    orderby="magnitude_rank",
    orderby_ascending=True,
    figure_size=(8, 10),
)

(
    n2a_norm
    +
    # change theme
    p9.theme_tufte()
    +
    # modify theme
    p9.theme(
        # adjust facet size
        strip_text=p9.element_text(size=12)
    )
)
n2a_norm.save(filename="liana-dotplot-magnitude_rank-normal-diet-n2a-insr-status.pdf")
```

```{python}
# First, filter the DataFrame
filtered_df = adata_norm.uns["liana_res"][
    adata_norm.uns["liana_res"]["receptor_complex"] == "Insr"
]

# Then, pass the filtered DataFrame to the dotplot function
n2a_norm = li.pl.dotplot(
    liana_res=filtered_df,
    colour="magnitude_rank",
    size="specificity_rank",
    inverse_size=True,
    inverse_colour=True,
    source_labels=["POMC neurons", "AGRP/NPY neurons"],
    target_labels=["Astro_INSR+", "Astro_INSR-"],
    orderby="lr_logfc",
    orderby_ascending=False,
    figure_size=(8, 10),
)

(
    n2a_norm
    +
    # change theme
    p9.theme_tufte()
    +
    # modify theme
    p9.theme(
        # adjust facet size
        strip_text=p9.element_text(size=12)
    )
)
n2a_norm.save(filename="liana-dotplot-insr-logfc-normal-diet-n2a-insr-status.pdf")
```

```{python}
n2a_norm = li.pl.dotplot(
    liana_res=filtered_df,
    colour="magnitude_rank",
    size="specificity_rank",
    inverse_size=True,
    inverse_colour=True,
    source_labels=["POMC neurons", "AGRP/NPY neurons"],
    target_labels=["Astro_INSR+", "Astro_INSR-"],
    filterby="magnitude_rank",
    filter_lambda=lambda x: x <= 0.01,
    orderby="specificity_rank",
    orderby_ascending=True,
    figure_size=(8, 10),
)

(
    n2a_norm
    +
    # change theme
    p9.theme_tufte()
    +
    # modify theme
    p9.theme(
        # adjust facet size
        strip_text=p9.element_text(size=12)
    )
)
n2a_norm.save(
    filename="liana-dotplot-insr-specificity_rank-normal-diet-n2a-insr-status.pdf"
)
```

```{python}
n2a_norm = li.pl.dotplot(
    liana_res=filtered_df,
    colour="magnitude_rank",
    size="specificity_rank",
    inverse_size=True,
    inverse_colour=True,
    source_labels=["POMC neurons", "AGRP/NPY neurons"],
    target_labels=["Astro_INSR+", "Astro_INSR-"],
    filterby="specificity_rank",
    filter_lambda=lambda x: x <= 0.01,
    orderby="magnitude_rank",
    orderby_ascending=True,
    figure_size=(8, 10),
)

(
    n2a_norm
    +
    # change theme
    p9.theme_tufte()
    +
    # modify theme
    p9.theme(
        # adjust facet size
        strip_text=p9.element_text(size=12)
    )
)
n2a_norm.save(
    filename="liana-dotplot-insr-magnitude_rank-normal-diet-n2a-insr-status.pdf"
)
```

```{python}
a2n_norm = li.pl.dotplot(
    adata=adata_norm,
    colour="magnitude_rank",
    size="specificity_rank",
    inverse_size=True,
    inverse_colour=True,
    source_labels=["Astro_INSR+", "Astro_INSR-"],
    target_labels=["POMC neurons", "AGRP/NPY neurons"],
    top_n=20,
    orderby="lr_logfc",
    orderby_ascending=False,
    figure_size=(8, 10),
)

(
    a2n_norm
    +
    # change theme
    p9.theme_tufte()
    +
    # modify theme
    p9.theme(
        # adjust facet size
        strip_text=p9.element_text(size=12)
    )
)
a2n_norm.save(filename="liana-dotplot-logfc-normal-diet-a2n-insr-status.pdf")
```

```{python}
a2n_norm = li.pl.dotplot(
    adata=adata_norm,
    colour="magnitude_rank",
    size="specificity_rank",
    inverse_size=True,
    inverse_colour=True,
    source_labels=["Astro_INSR+", "Astro_INSR-"],
    target_labels=["POMC neurons", "AGRP/NPY neurons"],
    filterby="magnitude_rank",
    filter_lambda=lambda x: x <= 0.01,
    top_n=20,
    orderby="specificity_rank",
    orderby_ascending=True,
    figure_size=(8, 10),
)

(
    a2n_norm
    +
    # change theme
    p9.theme_tufte()
    +
    # modify theme
    p9.theme(
        # adjust facet size
        strip_text=p9.element_text(size=12)
    )
)
a2n_norm.save(filename="liana-dotplot-specificity_rank-normal-diet-a2n-insr-status.pdf")
```

```{python}
a2n_norm = li.pl.dotplot(
    adata=adata_norm,
    colour="magnitude_rank",
    size="specificity_rank",
    inverse_size=True,
    inverse_colour=True,
    source_labels=["Astro_INSR+", "Astro_INSR-"],
    target_labels=["POMC neurons", "AGRP/NPY neurons"],
    filterby="specificity_rank",
    filter_lambda=lambda x: x <= 0.01,
    top_n=20,
    orderby="magnitude_rank",
    orderby_ascending=True,
    figure_size=(8, 10),
)

(
    a2n_norm
    +
    # change theme
    p9.theme_tufte()
    +
    # modify theme
    p9.theme(
        # adjust facet size
        strip_text=p9.element_text(size=12)
    )
)
a2n_norm.save(filename="liana-dotplot-magnitude_rank-normal-diet-a2n-insr-status.pdf")
```

Save data

```{python}
adata_norm.write(
    f"/data/{bioproject}/data/velocity-signalling/{bioproject}-signalling-norm-insr-status.h5ad"
)
```


#### High Fat High Sugar Diet

```{python}
adata_hfd.obs["k_tree"] = adata_hfd.obs["k_tree"].astype("category")
adata_hfd.raw.X
```

subset groups of interest

```{python}
sc.pl.umap(
    adata_hfd,
    color=["k_tree"],
    size=pt_size,
    legend_loc="on data",
    show=True,
    save=False,
)
```

```{python}
sc.pl.umap(
    adata_hfd,
    color=[
        "Rbfox3",
        "Pomc",
        "Agrp",
        "Npy",
        "Npy1r",
        "Npy2r",
        "Gfap",
        "Insr",
        "Slc1a3",
        "Htra1",
        "Mfn2",
        "Fos",
    ],
    alpha=0.3,
    size=pt_size,
    show=True,
    save=False,
)
```

```{python}
sc.pl.embedding(
    adata_hfd,
    basis="X_pacmap",
    color=[
        "Rbfox3",
        "Pomc",
        "Agrp",
        "Npy",
        "Npy1r",
        "Npy2r",
        "Gfap",
        "Insr",
        "Slc1a3",
        "Htra1",
        "Mfn2",
        "Fos",
    ],
    alpha=0.3,
    add_outline=False,
    legend_fontsize=12,
    legend_fontoutline=2,
    frameon=False,
    palette="nipy_spectral",
    show=True,
    save="-pacmap-int-HFHS-diet-insr-status.pdf",
)
```

```{python}
sc.pl.embedding(
    adata_hfd,
    basis="X_pacmap",
    color=[g for g in genes_embed if g in adata_hfd.var_names],
    alpha=0.3,
    add_outline=False,
    legend_fontsize=12,
    legend_fontoutline=2,
    frameon=False,
    palette="nipy_spectral",
    show=True,
    save="-pacmap-adgene-HFHS-diet-insr-status.pdf",
)
```

```{python}
with matplotlib.rc_context({"figure.figsize": (5.5, 4)}):
    sc.pl.violin(
        adata_hfd,
        ["Pomc", "Agrp", "Npy", "Insr", "Gfap", "Fos"],
        groupby="k_tree",
        stripplot=False,
        frameon=False,
        palette="nipy_spectral",
        show=True,
        save="-violin-adgene-HFHS-diet-insr-status.pdf",
    )
```

```{python}
pomc_neurons = adata_hfd[
    (adata_hfd[:, "Pomc"].to_df() > 10).stack().values
    & (adata_hfd.obs["ora_celltype"].isin(["Neurons"])),
    :,
]
npy_neurons = adata_hfd[
    (
        (adata_hfd[:, "Agrp"].to_df() > 10).stack().values
        | (adata_hfd[:, "Npy"].to_df() > 10).stack().values
    )
    & (adata_hfd.obs["ora_celltype"].isin(["Neurons"])),
    :,
]
insr_pos_astro = adata_hfd[
    (adata_hfd[:, "Insr"].to_df() > 1).stack().values
    & (adata_hfd.obs_names.isin(adata.obs_names)),
    :,
]
insr_neg_astro = adata_hfd[
    (adata_hfd[:, "Insr"].to_df() == 0).stack().values
    & (adata_hfd.obs_names.isin(adata.obs_names)),
    :,
]
```

```{python}
adata_hfd.obs["goi"] = adata_hfd.obs["k_tree"]
adata_hfd.obs["goi"] = adata_hfd.obs["goi"].cat.add_categories("POMC neurons")
adata_hfd.obs.loc[
    lambda df: df.index.isin(pomc_neurons.obs.index), "goi"
] = "POMC neurons"
adata_hfd.obs["goi"] = adata_hfd.obs["goi"].cat.add_categories("AGRP/NPY neurons")
adata_hfd.obs.loc[
    lambda df: df.index.isin(npy_neurons.obs.index), "goi"
] = "AGRP/NPY neurons"
adata_hfd.obs["goi"] = adata_hfd.obs["goi"].cat.add_categories("Astro_INSR+")
adata_hfd.obs.loc[
    lambda df: df.index.isin(insr_pos_astro.obs.index), "goi"
] = "Astro_INSR+"
adata_hfd.obs["goi"] = adata_hfd.obs["goi"].cat.add_categories("Astro_INSR-")
adata_hfd.obs.loc[
    lambda df: df.index.isin(insr_neg_astro.obs.index), "goi"
] = "Astro_INSR-"

adata_hfd = adata_hfd[
    adata_hfd.obs["goi"].isin(
        ["POMC neurons", "AGRP/NPY neurons", "Astro_INSR+", "Astro_INSR-"]
    )
]
adata_hfd.obs["goi"].cat.remove_unused_categories(inplace=True)
```

```{python}
sc.pl.embedding(
    adata_hfd,
    basis="X_pacmap",
    color=[
        "Rbfox3",
        "Pomc",
        "Agrp",
        "Npy",
        "Npy1r",
        "Npy2r",
        "Gfap",
        "Insr",
        "Slc1a3",
        "Htra1",
        "Mfn2",
        "Fos",
    ],
    alpha=0.3,
    add_outline=False,
    legend_fontsize=12,
    legend_fontoutline=2,
    frameon=False,
    palette="nipy_spectral",
    show=True,
    save="-pacmap-subset-int-HFHS-diet-insr-status.pdf",
)
```

```{python}
sc.pl.embedding(
    adata_hfd,
    basis="X_pacmap",
    color=[g for g in genes_embed if g in adata_hfd.var_names],
    alpha=0.3,
    add_outline=False,
    legend_fontsize=12,
    legend_fontoutline=2,
    frameon=False,
    palette="nipy_spectral",
    show=True,
    save="-pacmap-subset-adgene-HFHS-diet-insr-status.pdf",
)
```

```{python}
sc.pp.normalize_total(adata_hfd, target_sum=1e4)
sc.pp.log1p(adata_hfd)
adata_hfd.raw = adata_hfd
li.mt.rank_aggregate(
    adata_hfd,
    groupby="goi",
    de_method="logreg",
    expr_prop=0,
    min_cells=3,
    return_all_lrs=True,
    verbose=False,
    resource_name="mouseconsensus",
    n_perms=100000,
    seed=reseed,
)
```

```{python}
adata_hfd.uns["liana_res"].to_csv("hfd-arc_astro-with_npy_pomc-liana-res.csv")
adata_hfd.uns["liana_res"].head()
```

```{python}
n2a_hfd = li.pl.dotplot(
    adata=adata_hfd,
    colour="magnitude_rank",
    size="specificity_rank",
    inverse_size=True,
    inverse_colour=True,
    source_labels=["POMC neurons", "AGRP/NPY neurons"],
    target_labels=["Astro_INSR+", "Astro_INSR-"],
    top_n=20,
    orderby="lr_logfc",
    orderby_ascending=False,
    figure_size=(8, 10),
)

(
    n2a_hfd
    +
    # change theme
    p9.theme_tufte()
    +
    # modify theme
    p9.theme(
        # adjust facet size
        strip_text=p9.element_text(size=12)
    )
)
n2a_hfd.save(filename="liana-dotplot-logfc-HFHS-diet-n2a-insr-status.pdf")
```

```{python}
n2a_hfd = li.pl.dotplot(
    adata=adata_hfd,
    colour="magnitude_rank",
    size="specificity_rank",
    inverse_size=True,
    inverse_colour=True,
    source_labels=["POMC neurons", "AGRP/NPY neurons"],
    target_labels=["Astro_INSR+", "Astro_INSR-"],
    filterby="magnitude_rank",
    filter_lambda=lambda x: x <= 0.01,
    top_n=20,
    orderby="specificity_rank",
    orderby_ascending=True,
    figure_size=(8, 10),
)

(
    n2a_hfd
    +
    # change theme
    p9.theme_tufte()
    +
    # modify theme
    p9.theme(
        # adjust facet size
        strip_text=p9.element_text(size=12)
    )
)
n2a_hfd.save(filename="liana-dotplot-specificity_rank-HFHS-diet-n2a-insr-status.pdf")
```

```{python}
n2a_hfd = li.pl.dotplot(
    adata=adata_hfd,
    colour="magnitude_rank",
    size="specificity_rank",
    inverse_size=True,
    inverse_colour=True,
    source_labels=["POMC neurons", "AGRP/NPY neurons"],
    target_labels=["Astro_INSR+", "Astro_INSR-"],
    filterby="specificity_rank",
    filter_lambda=lambda x: x <= 0.01,
    top_n=20,
    orderby="magnitude_rank",
    orderby_ascending=True,
    figure_size=(8, 10),
)

(
    n2a_hfd
    +
    # change theme
    p9.theme_tufte()
    +
    # modify theme
    p9.theme(
        # adjust facet size
        strip_text=p9.element_text(size=12)
    )
)
n2a_hfd.save(filename="liana-dotplot-magnitude_rank-HFHS-diet-n2a-insr-status.pdf")
```

```{python}
# First, filter the DataFrame
filtered_df = adata_hfd.uns["liana_res"][
    adata_hfd.uns["liana_res"]["receptor_complex"] == "Insr"
]

# Then, pass the filtered DataFrame to the dotplot function
n2a_hfd = li.pl.dotplot(
    liana_res=filtered_df,
    colour="magnitude_rank",
    size="specificity_rank",
    inverse_size=True,
    inverse_colour=True,
    source_labels=["POMC neurons", "AGRP/NPY neurons"],
    target_labels=["Astro_INSR+", "Astro_INSR-"],
    orderby="lr_logfc",
    orderby_ascending=False,
    figure_size=(8, 10),
)

(
    n2a_hfd
    +
    # change theme
    p9.theme_tufte()
    +
    # modify theme
    p9.theme(
        # adjust facet size
        strip_text=p9.element_text(size=12)
    )
)
n2a_hfd.save(filename="liana-dotplot-insr-logfc-HF-diet-n2a-insr-status.pdf")
```

```{python}
n2a_hfd = li.pl.dotplot(
    liana_res=filtered_df,
    colour="magnitude_rank",
    size="specificity_rank",
    inverse_size=True,
    inverse_colour=True,
    source_labels=["POMC neurons", "AGRP/NPY neurons"],
    target_labels=["Astro_INSR+", "Astro_INSR-"],
    filterby="magnitude_rank",
    filter_lambda=lambda x: x <= 0.01,
    orderby="specificity_rank",
    orderby_ascending=True,
    figure_size=(8, 10),
)

(
    n2a_hfd
    +
    # change theme
    p9.theme_tufte()
    +
    # modify theme
    p9.theme(
        # adjust facet size
        strip_text=p9.element_text(size=12)
    )
)
n2a_hfd.save(filename="liana-dotplot-insr-specificity_rank-HF-diet-n2a-insr-status.pdf")
```

```{python}
n2a_hfd = li.pl.dotplot(
    liana_res=filtered_df,
    colour="magnitude_rank",
    size="specificity_rank",
    inverse_size=True,
    inverse_colour=True,
    source_labels=["POMC neurons", "AGRP/NPY neurons"],
    target_labels=["Astro_INSR+", "Astro_INSR-"],
    filterby="specificity_rank",
    filter_lambda=lambda x: x <= 0.01,
    orderby="magnitude_rank",
    orderby_ascending=True,
    figure_size=(8, 10),
)

(
    n2a_hfd
    +
    # change theme
    p9.theme_tufte()
    +
    # modify theme
    p9.theme(
        # adjust facet size
        strip_text=p9.element_text(size=12)
    )
)
n2a_hfd.save(filename="liana-dotplot-insr-magnitude_rank-HF-diet-n2a-insr-status.pdf")
```

```{python}
a2n_hfd = li.pl.dotplot(
    adata=adata_hfd,
    colour="magnitude_rank",
    size="specificity_rank",
    inverse_size=True,
    inverse_colour=True,
    source_labels=["Astro_INSR+", "Astro_INSR-"],
    target_labels=["POMC neurons", "AGRP/NPY neurons"],
    top_n=20,
    orderby="lr_logfc",
    orderby_ascending=False,
    figure_size=(8, 10),
)

(
    a2n_hfd
    +
    # change theme
    p9.theme_tufte()
    +
    # modify theme
    p9.theme(
        # adjust facet size
        strip_text=p9.element_text(size=12)
    )
)
a2n_hfd.save(filename="liana-dotplot-logfc-HFHS-diet-a2n-insr-status.pdf")
```

```{python}
a2n_hfd = li.pl.dotplot(
    adata=adata_hfd,
    colour="magnitude_rank",
    size="specificity_rank",
    inverse_size=True,
    inverse_colour=True,
    source_labels=["Astro_INSR+", "Astro_INSR-"],
    target_labels=["POMC neurons", "AGRP/NPY neurons"],
    filterby="magnitude_rank",
    filter_lambda=lambda x: x <= 0.01,
    top_n=20,
    orderby="specificity_rank",
    orderby_ascending=True,
    figure_size=(8, 10),
)

(
    a2n_hfd
    +
    # change theme
    p9.theme_tufte()
    +
    # modify theme
    p9.theme(
        # adjust facet size
        strip_text=p9.element_text(size=12)
    )
)
a2n_hfd.save(filename="liana-dotplot-specificity_rank-HFHS-diet-a2n-insr-status.pdf")
```

```{python}
a2n_hfd = li.pl.dotplot(
    adata=adata_hfd,
    colour="magnitude_rank",
    size="specificity_rank",
    inverse_size=True,
    inverse_colour=True,
    source_labels=["Astro_INSR+", "Astro_INSR-"],
    target_labels=["POMC neurons", "AGRP/NPY neurons"],
    filterby="specificity_rank",
    filter_lambda=lambda x: x <= 0.01,
    top_n=20,
    orderby="magnitude_rank",
    orderby_ascending=True,
    figure_size=(8, 10),
)

(
    a2n_hfd
    +
    # change theme
    p9.theme_tufte()
    +
    # modify theme
    p9.theme(
        # adjust facet size
        strip_text=p9.element_text(size=12)
    )
)
a2n_hfd.save(filename="liana-dotplot-magnitude_rank-HFHS-diet-a2n-insr-status.pdf")
```

Save data

```{python}
adata_hfd.write(
    f"/data/{bioproject}/data/velocity-signalling/{bioproject}-signalling-treatment.h5ad"
)
```

Session information

```{python}
print(watermark())
print(watermark(iversions=True, globals_=globals()))
```

